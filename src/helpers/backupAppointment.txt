  
  Service
  // async getAppointmentsByVeterinarianAndDate (veterinarianId:string, date: Date): Promise<AppResponseCalendarDayDto[]> {
  //   const appointments: Appointment[] = await this.appointmentRepository.getAppointmentsByVeterinarianAndDate(veterinarianId, date);
  //   const responseAppointments: AppResponseCalendarDayDto[] = []
  //   if (appointments.length>0) {
  //     appointments.forEach ((appointment) => {
  //           let endHour:number = +appointment.time.split(":")[0];
  //           let endMin: number = +appointment.time.split(":")[1]
  //           const delayApp: number = appointment.service.durationMin;
  //           endMin += delayApp;
  //           if (endMin >= 60) {
  //             endHour += 1;
  //             endMin -= 60
  //           }
  //           const responseAppointment: AppResponseCalendarDayDto = {
  //             id: appointment.id,
  //             Subject: `${appointment.service.service} - ${appointment.pet.user.name} ${appointment.pet.user.lastName}`, //"Rayos X - Javier", servicio - nombre del cliente
  //             description: appointment.messageUser ? `Mascota: ${appointment.pet.name} - Observación: ${appointment.messageUser}` : `Mascota: ${appointment.pet.name} - Observación: Sin Observacíones`, //"Mascota: Firu - Observaciones: Sin observaciones", Pet - Observacion del Cliente
  //             StartTime: new Date(appointment.date.getFullYear(), appointment.date.getMonth(), appointment.date.getDate(), +appointment.time.split(":")[0], +appointment.time.split(":")[1]), // new Date(2024, 8, 9, 9, 0), ///anio, -mes, dia, hora, minutos Horario de comienzo
  //             EndTime: new Date(appointment.date.getFullYear(), appointment.date.getMonth(), appointment.date.getDate(), endHour, endMin), //new Date(2024, 8, 9, 10, 0), Horario fin
  //             isAllDay: false, //false, siempre en false
  //           }
  //           responseAppointments.push(responseAppointment);
  //     })  
  //   } 
  //   console.log("responseAppointments", responseAppointments)
  //   return responseAppointments;
  // }


repositorio
// async getAppointmentsByVeterinarianAndDate (veterinarianId:string, dateFind: Date): Promise<Appointment[]> {

  //   return await this.appointmentRepository.find({
  //     select: {id:true, messageUser:true, service: {service:true, durationMin:true}, pet: {name:true, user: {name:true, lastName:true,}}},
  //     where: {service: {veterinarianId}, date: Equal(dateFind), state: {state:"Pendiente"}},
  //     relations: {service: true , pet: {user:true}}
  //   })
  // }