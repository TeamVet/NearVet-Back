cómo quedaria la siguiente ruta con una logica de paginación:


// CONTROLADOR 

@Get()
  @ApiOperation({summary: "Devuelve todos los Tratamientos"})
  @HttpCode(200)
  async getTreatments (): Promise<Treatment[]>  {
    return await this.treatmentService.getTreatments();
  }


// SERVICIO
async getTreatments (): Promise<Treatment[]>  {
    return await this.treatmentRepository.getTreatments();
  }


// REPOSITORIO

async getTreatments (): Promise<Treatment[]>  {
        return await this.treatmentRepository.find({
            relations: {service: true, clinicalExamination: true},
            select: {service: {id:true, service:true},
                    clinicalExamination:{id:true, anamnesis:true, veterinarian: 
                                    {id:true, licence:true, user: 
                                        {id:true, name:true, lastName:true}}}}});
    }



puedes mostrarme como quedaría la ruta de getTreatments con el paginado 
basado en el siguiente ejemplo:

// CONTROLADOR
@Get()
  @ApiOperation({summary: "Obtiene todas las pendientes"})
  getAllPendings(@Query("page") page:number, @Query("limit") limit:number) {
    return this.pendingService.getAllPendings(page, limit);
  }


// SERVICIO
async getAllPendings(page:number, limit:number) {
    return await this.pendingRepository.getAllPendingsRepository( page, limit);
  }

// REPOSITORIO
async getAllPendingsRepository(page: number, limit: number): Promise<Pending[]> {
    return await this.pendingRepository.find({skip: (page-1)*limit, take:limit, relations: {service:true, pet:true}});
  }





me ayudas con esta también:

// CONTROLADOR
@Post()
  @ApiOperation({summary: 'Retorna todos los Turnos libres de un servicio en particular'})
  async getAppointmentService(@Body() getApp: GetAppointment) {
    const {serviceId, date} = getApp
    return await this.availabilityServiceService.getAppointmentService(serviceId, date);
  }


// SERVICIO
async getTreatmentsByPet (petId: string): Promise<Treatment[]>  {
  return await this.treatmentRepository.getTreatmentsByPet(petId);
}

// REPOSITORIO
async getTreatmentsByPet (petId: string): Promise<Treatment[]>  {
        return await this.treatmentRepository.find({
            where: {clinicalExamination: {petId}}, 
            relations: {service:true, clinicalExamination: {veterinarian: {user:true}}, applicationProducts: {product:true}},
            });
    }